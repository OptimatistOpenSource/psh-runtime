package profiling:profiling;

world bindings {
    import op: interface {
        log: func(info-ptr: u32, info-len: u32);
        log-err: func(info-ptr: u32, info-len: u32);
        exit: func();
        drop-resource: func(id: u32) -> u32;

        file-is-exist: func(path-ptr: u32, path-len: u32) -> u32;
        file-read: func(
            ret-area-ptr: u32,
            path-ptr: u32,
            path-len: u32
        );
        file-write: func(
            ret-area-ptr: u32,
            path-ptr: u32,
            path-len: u32,
            contents-ptr: u32,
            contents-len: u32
        );
        file-append: func(
            ret-area-ptr: u32,
            path-ptr: u32,
            path-len: u32,
            contents-ptr: u32,
            contents-len: u32
        );
        file-remove-file: func(
            ret-area-ptr: u32,
            path-ptr: u32,
            path-len: u32,
        );
        file-create-dir: func(
            ret-area-ptr: u32,
            path-ptr: u32,
            path-len: u32,
        );
        file-remove-dir: func(
            ret-area-ptr: u32,
            path-ptr: u32,
            path-len: u32,
        );

        perf-new-counter: func(
            ret-area-ptr: u32,
            serialized-cfg-ptr: u32,
            serialized-cfg-len: u32,
        );
        perf-enable-counter: func(
            ret-area-ptr: u32,
            counter-rid: u32
        );
        perf-disable-counter: func(
            ret-area-ptr: u32,
            counter-rid: u32
        );
        perf-get-counter-result: func(
            ret-area-ptr: u32,
            counter-rid: u32
        );
    }
}
